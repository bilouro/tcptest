# Copyright (c) 2008, Victor Hugo Bilouro
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# Neither the name of Victor Hugo Bilouro nor the names of its 
# contributors may be used to endorse or promote products derived from 
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Author: Victor Hugo Bilouro 
#
# Description: tcptest module 
#
import unittest 
from pcs.packets import ipv4
from pcs.packets import tcp
from pcs.packets import ethernet
import pcs

def assertAcknowledgmentPresent(self, tcp):
    """RFC??
       ...ack must be present in every packet since step #2 of 3wayhand
    """
    self.failUnless(tcp.ack_number != None and tcp.ack_number > 0, \
        'ack number must be present and greater then 0') 

def assertSynPresent(self, tcp):
    """
    """
    self.failIf(tcp.syn < 1, \
        "we expect the segment must have SYN bit set")
    assertSequencePresent(self, tcp)

def assertSequencePresent(self, tcp):
    """RFC793-P24-p1
       A fundamental notion in the design is that every octet of data sent
    over a TCP connection has a sequence number.
    """
    self.failUnless(tcp.sequence != None and tcp.sequence > 0, \
        'sequence must be present and greater then 0') 

def assertExpectedSequence(self, tcb, tcp, from_, to):
    """RFC??
    """
    self.assertEqual(tcp.sequence, tcb.tcpsequence[ to ], \
        'sequence: ' + str(tcp.sequence) + ' , but we expect: ' + str(tcb.tcpsequence[ to ]) )
    
def assertExpectedAcknowledgment(self, tcb, tcp, from_, to):
    """RFC793-P16-p2
    Acknowledgment Number, value of the next sequence number the sender of
    the segment is expecting to receive
    """
    self.assertEqual(tcp.ack_number, tcb.tcpsequence[ from_ ], \
        'ack number: ' + str(tcp.ack_number) + ' , but we expect: ' + str(tcb.tcpsequence[ from_ ]) )

def assertSequenceAcknowledgmentOK(self, tcb, tcp, from_, to):
    #RFC793-P24-p1
    assertSequencePresent(self, tcp)
    #RFC TODO
    assertAcknowledgmentPresent(self, tcp)
    #RFC793-P16-p2
    assertExpectedAcknowledgment(self, tcb, tcp, from_, to)
    #RFC TODO
    assertExpectedSequence(self, tcb, tcp, from_, to)


def assertReset(self, tcb, tcp, from_, to, tcp_sent):
    """
        RFC 793 - Section 3.4 Establishing a Connection
        Page 36

        If the incoming segment has an ACK field, the reset takes its
        sequence number from the ACK field of the segment, otherwise the
        reset has sequence number zero and the ACK field is set to the sum
        of the sequence number and segment length of the incoming segment.
        The connection remains in the CLOSED state.
    """
    #it must be a reset
    self.failIf(tcp.reset <1, 'reset bit must be set') 

    if (tcp_sent.ack_number == None or tcp_sent.ack_number == 0):
        #Assuming that "incoming segment" has *NO* ACK Field we need assert that:
	#(1)has sequence number zero
        self.assertEqual(tcp.sequence, 0, \
            'The incoming segment has no ack, then the reset segment we expect must have sequence equal to zero')

	#(2)ACK field set to the sum of the sequence number and segment length
	expected_sum = len(tcp_sent.getbytes()) + tcp_sent.sequence  
	self.assertEqual(tcp.ack_number, expected_sum, \
            "The incoming segment has no ack, then the reset segment we expect must have ack_number equal to sum of the sequence number and segment length of the incoming segment. Expected ack_number: " + str(tcp.ack_number) + " given: " + str(expected_sum) )

    else: #(tcp.sent.ack_number > 0): 
        #Assuming that "incoming segment" has ACK Field we need assert that:
        #(1)sequence number set to the ACK sent (Reset use sequence that receiver waits for)
        assertExpectedSequence(self, tcb, tcp, from_, to)
 
def assertFin(self, tcp):
    """is fin flag on?
    """
    self.failIf(tcp.fin<1,  \
        "we expect the segment must have FIN bit set")


def createsyn(self, tcb, from_, to):
    """Create tcp syn flag expertise"""

    (ip, tcp) = createip(self, tcb, from_, to)

    #business
    tcp.syn = 1
    tcp.ack = 0
    tcb.tcpsequence[ from_ ] += 1

    return (ip, tcp)

def createfin(self, tcb, from_, to):
    """Create tcp fin flag expertise"""

    (ip, tcp) = createip(self, tcb, from_, to)

    #business
    tcp.fin = 1
    tcb.tcpsequence[ from_ ] += 1

    return (ip, tcp)
          
def createip(self, tcb, from_, to):
    """Create ip packet
    tcp is also created here"""
    ip1 = ipv4.ipv4()

    ip1.version = 4 
    ip1.hlen = 5   
    ip1.tos = 0     
    ip1.id = tcb.ipid[ from_ ] 
    ip1.flags = 0 
    ip1.offset = 0
    ip1.ttl = 64
    ip1.protocol = pcs.IPPROTO_TCP
    ip1.src = tcb.ip[ from_ ]
    ip1.dst = tcb.ip[ to ]
    ip1.length = len(ip1.bytes)

    # tcp here
    tcp1 = createtcp(self, tcb, ip1, from_, to)
    
    ip1.length = len(ip1.bytes) + len(tcp1.bytes) 
    #ip1.checksum = ip_cksum(ip1) #doind this at checkout(createwritepacket)
    
    return (ip1, tcp1) 


def createtcp(self, tcb, ip, from_, to):
    """Create tcp packet"""
    tcp1 = tcp.tcp()

    tcp1.sport = tcb.tcpport[ from_ ] 
    tcp1.dport = tcb.tcpport[ to ]
    tcp1.sequence = tcb.tcpsequence[ from_ ]        
    tcp1.ack_number = tcb.tcpsequence[ to ]
    tcp1.offset = 5
    tcp1.urgent = 0
    tcp1.ack = 1
    tcp1.push = 0
    tcp1.reset = 0
    tcp1.syn = 0
    tcp1.fin = 0
    tcp1.window = (1<<16)-1
    tcp1.urg_point = 0
    #tcp1.options
    
    #tcp1.checksum = tcp_cksum(tcp1 , ip) #doind this at checkout(createwrite)
    return tcp1


def receive(self, tcb, from_, to):
    """receive packet for this socket
    This method must handle timmers"""
    (ip, tcp) = (None, None)
    while 1: 
        reply = tcb.output[ from_ ].read()
        try: 
            packet = ethernet.ethernet(reply)
            ip = packet.data
            tcp = ip.data
            if (tcb.ip[ from_ ]==ip.dst and \
                tcb.ip[ to ]==ip.src and \
                tcb.tcpport[ from_ ]==tcp.dport and \
                tcb.tcpport[ to ]==tcp.sport): 
                break
        except: 
            print "packet ignored"
            pass
        
    return (ip, tcp)


def createethernet(self, tcb, from_, to):
    """Create ethernet header"""
    ether1 = ethernet.ethernet()
    ether1.src = tcb.ether[ from_ ]
    ether1.dst = tcb.ether[ to ]                
    ether1.type = 0x800
    
    return ether1
    

def createwritepacket(self, tcb, ip, tcp, from_, to):
    ether = createethernet(self, tcb, from_, to)
    
    tcp.checksum = tcp_cksum(tcp , ip) 

    ip.length = len(ip.bytes) + len(tcp.bytes) 
    ip.checksum = ip_cksum(ip)
 
    packet = pcs.Chain([ ether, ip, tcp ])
    tcb.output[ from_ ].write(packet.bytes, len(packet.bytes))
  

def tcp_cksum(self, ip, data = ""):  #TODO: add this method to pcs tcp.py
    """return tcpv4 checksum"""
    import struct
    total = 0
    
    tmpip = ipv4.pseudoipv4()
    tmpip.src = ip.src
    tmpip.dst = ip.dst
    tmpip.reserved = 0 
    tmpip.protocol = pcs.IPPROTO_TCP
    tmpip.length = len(self.getbytes()) + len(data)
    pkt = tmpip.getbytes() + self.getbytes() + data
    if len(pkt) % 2 == 1:
        pkt += "\0"
    for i in range(len(pkt)/2):
        total += (struct.unpack("!H", pkt[2*i:2*i+2])[0])
    total = (total >> 16) + (total & 0xffff)
    total += total >> 16
    return  ~total & 0xffff
    

def ip_cksum(ip):    #TODO: solve the self problem, may be adding another arg
    """calculate the IPv4 checksum over a packet
    
    returns the calculated checksum
    """
    import struct
    total = 0
    packet = ipv4.ipv4(ip.bytes)
    packet.checksum = 0
    bytes = packet.bytes
    
    if len(bytes) % 2 == 1:
        bytes += "\0"
      
    for i in range(len(bytes)/2):
        total += (struct.unpack("!H", bytes[2*i:2*i+2])[0])
    
    total = (total >> 16) + (total & 0xffff)
    total += total >> 16
     
    return ~total & 0xffff


def threewayhandshakenoopt(self, tcb, from_, to):    

    # 
    #--->Sending SYN
    (ipsyn, tcpsyn) = createsyn(self, tcb, from_, to)
    createwritepacket(self, tcb, ipsyn, tcpsyn, from_, to)
                                                           
    # 
    #--->Receivinig SYN + ACK
    (ipsynack, tcpsynack) = receive(self, tcb, from_, to) 
                               
    #Some blackmagic to use assertSequenceAcknowledgmentOK at SYN
    tcb.tcpsequence[ to ] = tcpsynack.sequence  
    assertSequenceAcknowledgmentOK(self, tcb, tcpsynack, from_, to)
    assertSynPresent(self, tcpsynack)
    tcb.tcpsequence[ to ] = tcpsynack.sequence + 1

    #
    #-->Sending ACK
    (ipack, tcpack) = createip(self, tcb, from_, to)
    createwritepacket(self, tcb, ipack, tcpack, from_, to)


def closeconnection(self, tcb, from_, to):    

    #
    #--->Sending FIN
    (ipfin, tcpfin) = createfin(self, tcb, from_, to)
    createwritepacket(self, tcb, ipfin, tcpfin, from_, to)
                                                           
    #
    #--->Receiving ACK from FIN sent
    (ipfinack, tcpfinack) = receive(self, tcb, from_, to) 
    assertSequenceAcknowledgmentOK(self, tcb, tcpfinack, from_, to)

    #
    #--->Receiving FIN
    #test if FIN was sent in the same segment
    if (tcpfinack.fin == None or tcpfinack.fin == 0):
        (ipfinack, tcpfinack) = receive(self, tcb, from_, to)
        assertSequenceAcknowledgmentOK(self, tcb, tcpfinack, from_, to)
        
    assertFin(self, tcpfinack)
    tcb.tcpsequence[ to ] += 1
             
    #
    #--->Sending ACK
    (ipackfin, tcpackfin) = createip(self, tcb, from_, to)
    createwritepacket(self, tcb, ipackfin, tcpackfin, from_, to)
                


def passivecloseconnection(self, tcb, from_, to):    

    #
    #--->Receiving FIN
    (ipfinack, tcpfinack) = receive(self, tcb, from_, to)
    assertSequenceAcknowledgmentOK(self, tcb, tcpfinack, from_, to)
    assertFin(self, tcpfinack)
    tcb.tcpsequence[ to ] += 1
             
    #
    #--->Sending ACK
    (ipackfin, tcpackfin) = createip(self, tcb, from_, to)
    createwritepacket(self, tcb, ipackfin, tcpackfin, from_, to)
                
    #
    #--->Sending FIN
    (ipfin, tcpfin) = createfin(self, tcb, from_, to)
    createwritepacket(self, tcb, ipfin, tcpfin, from_, to)
                                                           
    #
    #--->Receiving ACK from FIN sent
    (ipfinack, tcpfinack) = receive(self, tcb, from_, to) 
    assertSequenceAcknowledgmentOK(self, tcb, tcpfinack, from_, to)


class tcb:
    def __init__(self):
       self.ip = { }
       self.ipid = { }
       self.tcpport = { }
       self.tcpsequence = { }
       self.ether = { }
       self.output = { }
       self.conversation = None

    def __str__(self):
       retval=""
       
       retval+="ip = "+self.ip.__str__()+"\n"
       retval+="ipid = "+self.ipid.__str__()+"\n"
       retval+="tcpport = "+self.tcpport.__str__()+"\n"
       retval+="tcpsequence = "+self.tcpsequence.__str__()+"\n"
       retval+="pether = "+self.ether.__str__()+"\n"
       retval+="output = "+self.output.__str__()+"\n"
       #retval+="conversation = "+self.conversation
       
       return retval
 
